<?php

namespace Xshare\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use MakerLabs\PagerBundle\Adapter\DoctrineOrmAdapter;
use MakerLabs\PagerBundle\Adapter\ArrayAdapter;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface {

    /**
     * getting users with the quantity of their products
     * possible to use as an adapter for paginator
     * or as an array
     *
     * @author Iuli Dercaci
     * @param string $sort
     * @param bool $paginator
     * @param string $order
     * @return array | DoctrineOrmAdapter
     */
    public function getUsersList($sort = null, $order = 'ASC', $paginator = false) {

        $qb = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('u.user_id, u.username, u.firstname, u.lastname, u.photo, u.sex,
                (DATE_DIFF(CURRENT_DATE(), u.birth_date) / 365) age,
                count(u.user_id) products, (count(u.user_id) - p.status) available')
                ->from('XshareUserBundle:User', 'u')
                ->leftJoin('u.products', 'p');

        if ($sort)
            $qb->orderBy($sort, $order);

        $qb->groupBy('u.user_id');

        return new ArrayAdapter($qb->getQuery()->getArrayResult());
    }

    /**
     * updating password in db
     * @param string $password
     * @param string $salt
     * @param string $username
     * @return mixed
     */
    public function updatePassword($password, $salt, $username) {

        $query = $this->getEntityManager()->createQuery(
                        'UPDATE XshareUserBundle:User u
                SET u.password = :password, u.salt = :salt, u.updated_at = :date
                WHERE u.username = :username')
                ->setParameter('password', $password)
                ->setParameter('salt', $salt)
                ->setParameter('username', $username)
                ->setParameter('date', date('Y-m-d H:i:s', time()));

        return $query->execute();
    }

    /**
     * get user info
     * @param int $user_id
     * @return mixed
     */
    public function getUser($user_id) {
        $q = $this->createQueryBuilder('u')
                ->where('u.user_id = :user_id')
                ->setParameter('user_id', $user_id)
                ->getQuery();

        return $q->getSingleResult();
    }

    /**
     * all username values enregistred in the database for username validation
     * @return type
     */
    public function getAllUsernameValues() {

        $query = $this->getEntityManager()
            ->createQuery('SELECT u.username FROM XshareUserBundle:User u');

        return $query->execute();
    }

    /**
     * getting user info by username of email
     * @param string $username
     * @return mixed
     */
    public function loadUserByUsername($username) {

        return $this->getEntityManager()
                    ->createQuery('SELECT u FROM
                        XshareUserBundle:User u
                        WHERE u.username = :username
                        OR u.email = :username')
                    ->setParameters(
                            array('username' => $username)
                        )
                    ->getOneOrNullResult();
    }

    /**
     * @param UserInterface $user
     * @return mixed
     */
    public function refreshUser(UserInterface $user) {
        return $this->loadUserByUsername($user->getUsername());
    }

    /**
     * @param string $class
     * @return bool
     */
    public function supportsClass($class) {
        return $class === 'Xshare\UserBundle\Entity\User';
    }

    /**
     * getting the list of top distributors
     *
     * @author Iuli Dercaci
     * @param int $limit
     * @return ArrayAdapter
     */
    public function topDistributers($limit = null) {

        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select(
                'count(p.product_id) cproducts,
                 u.user_id, u.username, u.firstname, u.lastname, u.photo, u.sex,
                 (DATE_DIFF(CURRENT_DATE(), u.birth_date) / 365) age,
                 count(u.user_id) products, (count(u.user_id) - p.status) available')
            ->from('XshareProductBundle:Product', 'p')
            ->join('p.user', 'u')
            ->groupBy('p.user')
            ->orderBy('cproducts', 'desc');

        if (isset($limit))
            $query->setMaxResults ($limit);

        $result = $query->getQuery()->getArrayResult();

        return new ArrayAdapter($result);
    }
    
    /**
     * @author s.pasat
     * @param type $pid 
     * increment statistics colomn
     */
    public function addViewer($uid){
        $this->createQueryBuilder("u")
             ->update()
             ->set('u.statistics', 'u.statistics+1')
             ->where("u.user_id=:uid")   
             ->setParameter("uid", $uid)    
             ->getQuery()
             ->execute();   
    }
}