<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class XshareUserBundleEntityUserProxy extends \Xshare\UserBundle\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function setStatistics($nr)
    {
        $this->__load();
        return parent::setStatistics($nr);
    }

    public function getStatistics()
    {
        $this->__load();
        return parent::getStatistics();
    }

    public function setUpdatedAtValue()
    {
        $this->__load();
        return parent::setUpdatedAtValue();
    }

    public function getUsername()
    {
        $this->__load();
        return parent::getUsername();
    }

    public function getSalt()
    {
        $this->__load();
        return parent::getSalt();
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function getRoles()
    {
        $this->__load();
        return parent::getRoles();
    }

    public function eraseCredentials()
    {
        $this->__load();
        return parent::eraseCredentials();
    }

    public function equals(\Symfony\Component\Security\Core\User\UserInterface $user)
    {
        $this->__load();
        return parent::equals($user);
    }

    public function getUserId()
    {
        $this->__load();
        return parent::getUserId();
    }

    public function setFirstname($firstname)
    {
        $this->__load();
        return parent::setFirstname($firstname);
    }

    public function getFirstname()
    {
        $this->__load();
        return parent::getFirstname();
    }

    public function setLastname($lastname)
    {
        $this->__load();
        return parent::setLastname($lastname);
    }

    public function getLastname()
    {
        $this->__load();
        return parent::getLastname();
    }

    public function setUsername($username)
    {
        $this->__load();
        return parent::setUsername($username);
    }

    public function setPhoto($photo)
    {
        $this->__load();
        return parent::setPhoto($photo);
    }

    public function getPhoto()
    {
        $this->__load();
        return parent::getPhoto();
    }

    public function setSex($sex)
    {
        $this->__load();
        return parent::setSex($sex);
    }

    public function getSex()
    {
        $this->__load();
        return parent::getSex();
    }

    public function setBirthDate($birthDate)
    {
        $this->__load();
        return parent::setBirthDate($birthDate);
    }

    public function getBirthDate()
    {
        $this->__load();
        return parent::getBirthDate();
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function setPhone($phone)
    {
        $this->__load();
        return parent::setPhone($phone);
    }

    public function getPhone()
    {
        $this->__load();
        return parent::getPhone();
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function setTypeAccess($typeAccess)
    {
        $this->__load();
        return parent::setTypeAccess($typeAccess);
    }

    public function getTypeAccess()
    {
        $this->__load();
        return parent::getTypeAccess();
    }

    public function setActive($active)
    {
        $this->__load();
        return parent::setActive($active);
    }

    public function getActive()
    {
        $this->__load();
        return parent::getActive();
    }

    public function setUpdatedAt($updatedAt)
    {
        $this->__load();
        return parent::setUpdatedAt($updatedAt);
    }

    public function getUpdatedAt()
    {
        $this->__load();
        return parent::getUpdatedAt();
    }

    public function setCreatedAt($createdAt)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setSalt($salt)
    {
        $this->__load();
        return parent::setSalt($salt);
    }

    public function addCategory(\Xshare\ProductBundle\Entity\Category $categories)
    {
        $this->__load();
        return parent::addCategory($categories);
    }

    public function getCategories()
    {
        $this->__load();
        return parent::getCategories();
    }

    public function addProduct(\Xshare\ProductBundle\Entity\Product $products)
    {
        $this->__load();
        return parent::addProduct($products);
    }

    public function getProducts()
    {
        $this->__load();
        return parent::getProducts();
    }

    public function addNewsSubscriber(\Xshare\GeneralBundle\Entity\NewsSubscriber $news)
    {
        $this->__load();
        return parent::addNewsSubscriber($news);
    }

    public function getNews()
    {
        $this->__load();
        return parent::getNews();
    }

    public function addRequests(\Xshare\ProductBundle\Entity\Requests $request)
    {
        $this->__load();
        return parent::addRequests($request);
    }

    public function getBookings()
    {
        $this->__load();
        return parent::getBookings();
    }

    public function addBookings(\Xshare\ProductBundle\Entity\Booking $booking)
    {
        $this->__load();
        return parent::addBookings($booking);
    }

    public function getRequests()
    {
        $this->__load();
        return parent::getRequests();
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function getUploadRootDir()
    {
        $this->__load();
        return parent::getUploadRootDir();
    }

    public function getWebPath()
    {
        $this->__load();
        return parent::getWebPath();
    }

    public function getAbsolutePath()
    {
        $this->__load();
        return parent::getAbsolutePath();
    }

    public function preUpload()
    {
        $this->__load();
        return parent::preUpload();
    }

    public function upload()
    {
        $this->__load();
        return parent::upload();
    }

    public function removeUpload()
    {
        $this->__load();
        return parent::removeUpload();
    }

    public function serialize()
    {
        $this->__load();
        return parent::serialize();
    }

    public function unserialize($serialized)
    {
        $this->__load();
        return parent::unserialize($serialized);
    }

    public function getAge()
    {
        $this->__load();
        return parent::getAge();
    }

    public function getANAProducts()
    {
        $this->__load();
        return parent::getANAProducts();
    }

    public function addBooking(\Xshare\ProductBundle\Entity\Booking $bookings)
    {
        $this->__load();
        return parent::addBooking($bookings);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'user_id', 'firstname', 'lastname', 'username', 'photo', 'sex', 'birth_date', 'email', 'phone', 'password', 'type_access', 'active', 'updated_at', 'created_at', 'salt', 'categories', 'products', 'news', 'bookings', 'requests', 'statistics');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}