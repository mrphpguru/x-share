<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class XshareProductBundleEntityProductProxy extends \Xshare\ProductBundle\Entity\Product implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function setUpdatedAtValue()
    {
        $this->__load();
        return parent::setUpdatedAtValue();
    }

    public function getProductId()
    {
        $this->__load();
        return parent::getProductId();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setImage($image)
    {
        $this->__load();
        return parent::setImage($image);
    }

    public function getImage()
    {
        $this->__load();
        return parent::getImage();
    }

    public function setTotalNb($totalNb)
    {
        $this->__load();
        return parent::setTotalNb($totalNb);
    }

    public function getTotalNb()
    {
        $this->__load();
        return parent::getTotalNb();
    }

    public function setStatus($status)
    {
        $this->__load();
        return parent::setStatus($status);
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function setStatistics($nr)
    {
        $this->__load();
        return parent::setStatistics($nr);
    }

    public function getStatistics()
    {
        $this->__load();
        return parent::getStatistics();
    }

    public function setEnable($enable)
    {
        $this->__load();
        return parent::setEnable($enable);
    }

    public function getEnable()
    {
        $this->__load();
        return parent::getEnable();
    }

    public function setCreatedAt($createdAt)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setUpdatedAt($updatedAt)
    {
        $this->__load();
        return parent::setUpdatedAt($updatedAt);
    }

    public function getUpdatedAt()
    {
        $this->__load();
        return parent::getUpdatedAt();
    }

    public function setCategory(\Xshare\ProductBundle\Entity\Category $category)
    {
        $this->__load();
        return parent::setCategory($category);
    }

    public function getCategory()
    {
        $this->__load();
        return parent::getCategory();
    }

    public function setUser(\Xshare\UserBundle\Entity\User $user)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function addRequests(\Xshare\ProductBundle\Entity\Requests $request)
    {
        $this->__load();
        return parent::addRequests($request);
    }

    public function getBookings()
    {
        $this->__load();
        return parent::getBookings();
    }

    public function addBookings(\Xshare\ProductBundle\Entity\Booking $booking)
    {
        $this->__load();
        return parent::addBookings($booking);
    }

    public function getRequests()
    {
        $this->__load();
        return parent::getRequests();
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function getUploadDir()
    {
        $this->__load();
        return parent::getUploadDir();
    }

    public function getUploadRootDir()
    {
        $this->__load();
        return parent::getUploadRootDir();
    }

    public function getWebPath()
    {
        $this->__load();
        return parent::getWebPath();
    }

    public function getAbsolutePath()
    {
        $this->__load();
        return parent::getAbsolutePath();
    }

    public function preUpload()
    {
        $this->__load();
        return parent::preUpload();
    }

    public function upload()
    {
        $this->__load();
        return parent::upload();
    }

    public function removeUpload()
    {
        $this->__load();
        return parent::removeUpload();
    }

    public function getNameCuted($numberOfChars = 100, $afterText = '...')
    {
        $this->__load();
        return parent::getNameCuted($numberOfChars, $afterText);
    }

    public function addBooking(\Xshare\ProductBundle\Entity\Booking $bookings)
    {
        $this->__load();
        return parent::addBooking($bookings);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'product_id', 'name', 'description', 'image', 'category', 'user', 'requests', 'bookings', 'total_nb', 'status', 'enable', 'created_at', 'updated_at', 'statistics');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}